import { useEffect, useState } from "react";
import { View, Text, FlatList, TextInput, ActivityIndicator } from "react-native";
import axios from "axios";
import { getPokemonDetails } from "../lib/api"; // Fun√ß√£o de obter detalhes do Pok√©mon
import { styles } from "../styles/styles";
import PokeCard from "../components/PokeCard";
import Button from "../components/Button";

export default function PokemonScreen() {
  const [pokemonList, setPokemonList] = useState<any[]>([]); // Lista de pok√©mons carregados
  const [search, setSearch] = useState(""); // Texto de busca
  const [loading, setLoading] = useState(true); // Estado de carregamento
  const [nextUrl, setNextUrl] = useState<string | null>(null); // URL para carregar mais pok√©mons
  const [searchResult, setSearchResult] = useState<any | null>(null); // Resultado da busca
  const [message, setMessage] = useState(""); // Mensagem de aviso para o usu√°rio

  // Fun√ß√£o para buscar pok√©mons (100 por vez)
  const fetchPokemons = async (url: string = "https://pokeapi.co/api/v2/pokemon?limit=100") => {
    setLoading(true);
    setMessage(""); // Limpa a mensagem ao buscar os pok√©mons

    try {
      const response = await axios.get(url);
      const data = response.data.results; // Resultados da PokeAPI com nome e url de cada pok√©mon

      // Buscar detalhes de cada pok√©mon
      const detailedList = await Promise.all(
        data.map(async (p: any) => {
          if (!p?.url) return null;
          try {
            const details = await getPokemonDetails(p.url); // Detalhes do pok√©mon
            return details;
          } catch (error) {
            console.error("Erro ao buscar detalhes do Pok√©mon:", error);
            return null;
          }
        })
      );

      // Filtrando pok√©mons v√°lidos
      const cleanedList = detailedList.filter((p) => p && p.id);
      setPokemonList((prevList) => [...prevList, ...cleanedList]); // Atualiza a lista de pok√©mons

      // Atualiza a URL para a pr√≥xima p√°gina de resultados
      setNextUrl(response.data.next || null);
    } catch (err) {
      console.error("Erro ao buscar pok√©mons:", err);
    }

    setLoading(false);
  };

  // Carregar pok√©mons ao montar o componente
  useEffect(() => {
    fetchPokemons(); // Carrega os primeiros 100 pok√©mons
  }, []);

  // Fun√ß√£o para buscar um √∫nico Pok√©mon pela pesquisa
  const handleSearch = async () => {
    setSearchResult(null); // Limpa o resultado da busca anterior
    setLoading(true);

    try {
      // Verifica se o Pok√©mon est√° na lista j√° carregada
      const result = pokemonList.find((poke) =>
        poke.name.toLowerCase() === search.toLowerCase()
      );

      if (result) {
        setSearchResult(result); // Se encontrado, exibe o Pok√©mon
        setLoading(false);
        return;
      }

      // Caso o Pok√©mon n√£o esteja na lista, faz uma requisi√ß√£o direta √† PokeAPI
      const response = await axios.get(`https://pokeapi.co/api/v2/pokemon/${search.toLowerCase()}`);
      const pokemonDetails = await getPokemonDetails(response.data.url);
      setSearchResult(pokemonDetails); // Exibe o Pok√©mon encontrado
    } catch (error) {
      console.error("Erro ao buscar Pok√©mon:", error);
      setSearchResult(null); // Caso erro, reseta o resultado da pesquisa
    }

    setLoading(false);
  };

  // Filtra os pok√©mons da lista com base no nome da pesquisa
  const filtered = pokemonList.filter((poke) =>
    poke.name.toLowerCase().includes(search.toLowerCase())
  );

  return (
    <View style={styles.container}>
      <Text style={styles.title}>üîç Buscar Pok√©mon</Text>

      {/* Campo de busca */}
      <TextInput
        style={styles.input}
        placeholder="Digite o nome"
        value={search}
        onChangeText={setSearch}
      />
      
      {/* Bot√£o de pesquisa */}
      <Button text="Pesquisar" onPress={handleSearch} />

      {/* Carregando o Pok√©mon pesquisado */}
      {loading ? (
        <ActivityIndicator size="large" />
      ) : searchResult ? (
        <PokeCard pokemon={searchResult} /> // Exibe o Pok√©mon encontrado
      ) : (
        <FlatList
          data={filtered}
          keyExtractor={(item) => String(item.id)}
          renderItem={({ item }) => <PokeCard pokemon={item} />} // Exibe os pok√©mons filtrados
        />
      )}

      {/* Bot√£o para carregar mais pok√©mons */}
      {nextUrl && !loading && (
        <Button text="Ver Todos os Pok√©mon (Aperte para mais 100 Pok√©mon's)" onPress={() => fetchPokemons(nextUrl)} />
      )}
    </View>
  );
}